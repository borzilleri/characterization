<?php

/**
 * BasePlayer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property integer $level
 * @property integer $general_attack
 * @property string $weapon_main_name
 * @property integer $weapon_main_attack
 * @property integer $weapon_main_damage
 * @property string $weapon_main_dice
 * @property string $weapon_off_name
 * @property boolean $weapon_off_enabled
 * @property integer $weapon_off_attack
 * @property integer $weapon_off_damage
 * @property string $weapon_off_dice
 * @property string $implement_name
 * @property integer $implement_attack
 * @property integer $implement_damage
 * @property integer $action_points
 * @property integer $magic_item_uses
 * @property integer $health_cur
 * @property integer $health_bonus
 * @property integer $health_tmp
 * @property integer $surges_cur
 * @property integer $surges_bonus
 * @property integer $surge_value_bonus
 * @property integer $strength
 * @property integer $dexterity
 * @property integer $constitution
 * @property integer $intelligence
 * @property integer $wisdom
 * @property integer $charisma
 * @property integer $ac
 * @property boolean $ac_heavy
 * @property integer $fort
 * @property integer $ref
 * @property integer $will
 * @property integer $race_id
 * @property integer $archetype_id
 * @property clob $notes
 * @property Race $Race
 * @property Archetype $Archetype
 * @property Doctrine_Collection $Powers
 * @property Doctrine_Collection $Skills
 * @property Doctrine_Collection $Feats
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6401 2009-09-24 16:12:04Z guilhermeblanco $
 */
abstract class BasePlayer extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('player');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'unsigned' => '1',
             'length' => '8',
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('level', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('general_attack', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('weapon_main_name', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('weapon_main_attack', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('weapon_main_damage', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('weapon_main_dice', 'string', 25, array(
             'type' => 'string',
             'length' => '25',
             ));
        $this->hasColumn('weapon_off_name', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('weapon_off_enabled', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('weapon_off_attack', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('weapon_off_damage', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('weapon_off_dice', 'string', 25, array(
             'type' => 'string',
             'length' => '25',
             ));
        $this->hasColumn('implement_name', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('implement_attack', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('implement_damage', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('action_points', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('magic_item_uses', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('health_cur', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('health_bonus', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('health_tmp', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('surges_cur', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('surges_bonus', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('surge_value_bonus', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('strength', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('dexterity', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('constitution', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('intelligence', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('wisdom', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('charisma', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('ac', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('ac_heavy', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             ));
        $this->hasColumn('fort', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('ref', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('will', 'integer', null, array(
             'type' => 'integer',
             'default' => 0,
             ));
        $this->hasColumn('race_id', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => '1',
             'length' => '8',
             ));
        $this->hasColumn('archetype_id', 'integer', 8, array(
             'type' => 'integer',
             'unsigned' => '1',
             'length' => '8',
             ));
        $this->hasColumn('notes', 'clob', null, array(
             'type' => 'clob',
             ));

        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
    $this->hasOne('Race', array(
             'local' => 'race_id',
             'foreign' => 'id'));

        $this->hasOne('Archetype', array(
             'local' => 'archetype_id',
             'foreign' => 'id'));

        $this->hasMany('Power as Powers', array(
             'local' => 'id',
             'foreign' => 'player_id'));

        $this->hasMany('Skill as Skills', array(
             'local' => 'id',
             'foreign' => 'player_id'));

        $this->hasMany('Feat as Feats', array(
             'local' => 'id',
             'foreign' => 'player_id'));
    }
}